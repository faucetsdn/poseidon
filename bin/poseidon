#!/bin/bash

function show_help()
{
    echo "Poseidon, an application that leverages software defined networks (SDN) to acquire and then feed network traffic to a number of machine learning techniques. For more info visit: https://github.com/IQTLabs/poseidon

Usage: poseidon [option]
Options:
    -a,  api           get url to the Poseidon API
    -c,  config        display current configuration info
    -d,  delete        delete Poseidon installation (uses sudo)
    -e,  shell         enter into the Poseidon shell, requires Poseidon to already be running
    -h,  help          print this help
    -i,  install       install Poseidon repo (uses sudo)
    -l,  logs          display the information logs about what Poseidon is doing
    -p,  pipette       run pipette to support volos
    -r,  restart       restart the Poseidon service (uses sudo)
    -s,  start         start the Poseidon service (uses sudo)
    -S,  stop          stop the Poseidon service (uses sudo)
    -u,  update        update Poseidon repo, optionally supply a version or 'main' (uses sudo)
    -V,  version       get the version installed"
}

function die()
{
    printf '%s\n' "$1" >&2
    exit 1
}

function tmpdir()
{
    local out
    out=$(mktemp -d)
    echo "$out"
}

function check_args()
{
    for req_cmd in curl docker jq wget git ; do
            $req_cmd --help > /dev/null || die "$req_cmd must be installed"
    done

    while :; do
        case $1 in
            -a|api)
                if [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon_api" | wc -l)" -eq 1 ]; then
                    port_map=$(docker port "$(docker ps -q --filter "label=com.docker.compose.service=poseidon_api")" 8000/tcp)
                    port=$(echo "$port_map" | cut -d':' -f2)
                    # TODO `ip` doesn't work on OSX
                    default_iface=$(ip route list | head -1 | awk '{print $5}')
                    default_ip=$(ip addr show dev "$default_iface" | awk '$1 == "inet" { sub("/.*", "", $2); print $2 }' | head -1)
                    echo "Poseidon API endpoints are accessible here: http://$default_ip:$port/v1"
                else
                    echo "Poseidon API is not running."
                fi
                exit
                ;;
            -c|config)
                cat "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config
                exit
                ;;
            -d|delete)
                echo "TODO"
                exit
                ;;
            -h|\?|help)
                show_help
                exit
                ;;
            -i|install)
                confdir=$(tmpdir)
                poseidondir="$POSEIDON_PREFIX"/opt/poseidon
                sudo mkdir -p "$poseidondir"
                sudo chmod -R 755 "$poseidondir"
                poseidonconfig="$poseidondir"/config/poseidon.config
                if [ -f "$poseidondir"/poseidon.config ] ; then
                    sudo cp "$poseidondir"/poseidon.config "$confdir"/poseidon.config
                    poseidonconfig="$confdir"/poseidon.config
                fi
                if [ -z "$2" ]; then
                    sudo git clone https://github.com/iqtlabs/poseidon "$poseidondir"
                    pushd "$poseidondir" || exit
                    sudo git checkout "$(git describe --tags --abbrev=0)"
                    popd || exit
                else
                    if [ -f "$2" ] ; then
                        sudo tar -C "$poseidondir" -xvf "$2" --strip=1
                    else
                        sudo git clone https://github.com/iqtlabs/poseidon "$poseidondir"
                        pushd "$poseidondir" || exit
                        sudo git checkout "$2"
                        popd || exit
                    fi
                fi
                sudo cp -n "$poseidonconfig" "$poseidondir"/poseidon.config
                sudo rm -rf "confdir"
                sudo cp -n "$poseidondir"/bin/gen_pcap_manifest /usr/local/bin/gen_pcap_manifest
                sudo chmod +x /usr/local/bin/gen_pcap_manifest
                exit
                ;;
            -l|logs)
                tail -n 100 -f /var/log/poseidon/poseidon.log
                exit
                ;;
            -p|pipette)
                run_pipette
                exit
                ;;
            -r|restart)
                # TODO account for standalone
                poseidon stop && poseidon start
                exit
                ;;
            -e|shell)
                if [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon" | wc -l)" -eq 1 ]; then
                    docker exec -it "$(docker ps -q --filter "label=com.docker.compose.service=poseidon")" poseidon-cli "${@:2}"
                else
                    echo "Poseidon isn't running, you must first start Poseidon to use the shell."
                fi
                exit
                ;;
            -s|start)
                if [ "$(docker ps -q --filter "label=com.docker.compose.project=poseidon" | wc -l)" -gt 0 ]; then
                   echo "Found at least part of Poseidon already running, cleaning up first."
                   poseidon stop
                fi
                echo "Starting Poseidon..."
                pushd "$(pwd)" && cd "$POSEIDON_PREFIX"/opt/poseidon || exit
                sudo mkdir -p "$POSEIDON_PREFIX"/opt/poseidon_files
                sudo chmod 777 "$POSEIDON_PREFIX"/opt/poseidon_files
                sudo touch "$POSEIDON_PREFIX"/opt/poseidon/.poseidon_history
                sudo chmod 777 "$POSEIDON_PREFIX"/opt/poseidon/.poseidon_history
                rpcdir="$POSEIDON_PREFIX"/opt/faucetconfrpc
                if [ ! -d "$rpcdir" ] ; then sudo mkdir "$rpcdir" ; fi
                if docker node ls > /dev/null 2>&1; then
                    echo "Swarm Manager node detected..."
                    if [ "$(docker service ls -q --filter "label=project=poseidon" | wc -l)" -gt 0 ]; then
                        (docker service ls -q --filter "label=project=poseidon" | xargs docker service rm) && echo "Poseidon services cleaned up."
                    fi
                else
                    echo "Swarm Manager node not detected..."
                    find /opt/poseidon -name "docker compose*" | xargs sudo sed -i '/driver: overlay$/d'
                fi
                composefiles=(-f docker-compose.yaml -f helpers/faucet/docker-compose.yaml)
                installtype="--complete"
                if [ "$2" != "" ] ; then
                    installtype="$2"
                fi
                if [ "$installtype" = "--standalone" ]; then
                    # Start only Poseidon and RabbitMQ adapter - assume Faucet/Gauge and Prometheus/Grafana already running.
                    echo "Starting Poseidon with RabbitMQ adapter only."
                fi
                if [ "$installtype" = "--complete" ] ; then
                    echo "Starting Poseidon with FAUCET, Gauge, Prometheus and Grafana."
                    echo "Checking volumes..."
                    check_files
                    sudo mkdir -p "$POSEIDON_PREFIX"/opt/grafana/provisioning/dashboards "$POSEIDON_PREFIX"/opt/grafana/dashboards "$POSEIDON_PREFIX"/opt/prometheus
                    sudo chmod -R 777 "$POSEIDON_PREFIX"/opt/grafana "$POSEIDON_PREFIX"/opt/prometheus
                    sudo cp -n "$POSEIDON_PREFIX"/opt/poseidon/helpers/faucet/gauge.yaml "$POSEIDON_PREFIX"/etc/faucet/gauge.yaml
                    sudo cp -n "$POSEIDON_PREFIX"/opt/poseidon/helpers/faucet/dashboards.yaml "$POSEIDON_PREFIX"/opt/grafana/provisioning/dashboards/dashboards.yaml
                    sudo cp -n "$POSEIDON_PREFIX"/opt/poseidon/docs/poseidon_stats.json "$POSEIDON_PREFIX"/opt/grafana/dashboards/poseidon_stats.json
                    curl -L https://docs.faucet.nz/en/latest/_static/grafana-dashboards/faucet_instrumentation.json > "$POSEIDON_PREFIX"/opt/grafana/dashboards/faucet_instrumentation.json || true
                    curl -L https://docs.faucet.nz/en/latest/_static/grafana-dashboards/faucet_inventory.json > "$POSEIDON_PREFIX"/opt/grafana/dashboards/faucet_inventory.json || true
                    curl -L https://docs.faucet.nz/en/latest/_static/grafana-dashboards/faucet_port_statistics.json > "$POSEIDON_PREFIX"/opt/grafana/dashboards/faucet_port_statistics.json || true
                    composefiles+=(-f helpers/faucet/docker-compose-faucet.yaml -f helpers/faucet/docker-compose-monitoring.yaml)
                fi
                sudo chown "$USER" -R "$POSEIDON_PREFIX"/opt/faucetconfrpc
                docker compose "${composefiles[@]}" up --force-recreate -d --build --quiet-pull || die "docker compose returned an error"
                echo -n "Waiting for Poseidon to become healthy..."
                until [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon")" ] && [ "$(docker inspect poseidon_poseidon_1 -f \{\{.State.Health.Status\}\})" = "healthy" ]
                do
                    echo -n "\\"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "|"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "/"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "-"
                    echo -en "\\b"
                    sleep 0.3
                done
                if [ "$2" = "--complete" ]; then
                    wget -O- --auth-no-challenge --post-data='{"name":"${DS_PROMETHEUS}","type":"prometheus","access":"proxy","url":"http://prometheus:9090","basicAuth":false,"isDefault":true}' --header="Content-Type: application/json;charset=UTF-8charset=UTF-8" 'http://admin:admin@0.0.0.0:3000/api/datasources' 2> /dev/null
                fi
                echo "Poseidon successfully started."
                popd > /dev/null 2>&1 || exit
                exit
                ;;
            -S|stop)
                echo "Stopping Poseidon..."
                if [ "$(docker ps -q --filter "label=com.docker.compose.project=poseidon" | wc -l)" -gt 0 ]; then
                    (docker ps -q --filter "label=com.docker.compose.project=poseidon" | xargs docker rm -f) && echo "Poseidon successfully stopped."
                else
                    echo "Poseidon is not running."
                fi
                docker network rm poseidon_poseidon || true
                exit
                ;;
            -u|update)
                configdir=$(tmpdir)
                rpcdir="$POSEIDON_PREFIX"/opt/faucetconfrpc
                if [ ! -d "$rpcdir" ] ; then sudo mkdir -p "$rpcdir" ; fi
                sudo cp -a "$rpcdir" "$configdir"
                sudo cp "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config "$configdir" || true
                sudo rm -rf "$POSEIDON_PREFIX"/opt/poseidon
                if [ -z "$2" ]; then
                    echo "Updating to latest release..."
                    poseidon install
                else
                    echo "Updating to $2..."
                    poseidon install "$2"
                fi
                sudo cp -a "$configdir"/* "$POSEIDON_PREFIX"/opt/poseidon
                sudo rm -rf "$configdir"
                # update this script
                sudo curl -L https://raw.githubusercontent.com/IQTLabs/poseidon/main/bin/poseidon -o /usr/local/bin/poseidon
                sudo curl -L https://raw.githubusercontent.com/IQTLabs/poseidon/main/bin/gen_pcap_manifest -o /usr/local/bin/gen_pcap_manifest
                sudo chmod +x /usr/local/bin/poseidon /usr/local/bin/gen_pcap_manifest
                echo "Done updating. Run 'poseidon restart' to activate."
                exit
                ;;
            -V|version)
                if [ ! -f "$POSEIDON_PREFIX"/opt/poseidon/VERSION ]; then
                    echo "Poseidon not installed!"
                else
                    cat "$POSEIDON_PREFIX"/opt/poseidon/VERSION
                fi
                exit
                ;;
            ?*)
                printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
                ;;
            *)
                break
        esac
        shift
    done
}

function check_files()
{
    if [ ! -d /var/log/faucet ]; then
        sudo mkdir -p /var/log/faucet
    fi
    if [ -d /var/log/faucet/faucet.log ]; then
        sudo rm -rf /var/log/faucet/faucet.log
    fi
    if [ -d /var/log/faucet/faucet_exception.log ]; then
        sudo rm -rf /var/log/faucet/faucet_exception.log
    fi
    if [ ! -f /var/log/faucet/faucet.log ]; then
        sudo touch /var/log/faucet/faucet.log
    fi
    if [ ! -f /var/log/faucet/faucet_exception.log ]; then
        sudo touch /var/log/faucet/faucet_exception.log
    fi

    if [ ! -d /var/log/poseidon ]; then
        sudo mkdir -p /var/log/poseidon
        sudo chmod -R 755 /var/log/poseidon
    fi
    if [ -d /var/log/poseidon/poseidon.log ]; then
        sudo rm -rf /var/log/poseidon/poseidon.log
    fi
    if [ ! -f /var/log/poseidon/poseidon.log ]; then
        sudo touch /var/log/poseidon/poseidon.log
    fi

    if [ ! -d "$POSEIDON_PREFIX"/etc/faucet/ ]; then
        sudo mkdir -p "$POSEIDON_PREFIX"/etc/faucet/
    fi
    if [ -d "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml ]; then
        sudo rm -rf "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml
    fi
    if [ ! -f "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml ]; then
        sudo touch "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml
    fi
}

function parse_config(){
    CFG="$POSEIDON_PREFIX"/opt/poseidon/poseidon.config;
    # shellcheck disable=SC2013
    for ini in $(awk '/^\[/' "$CFG") # finds the SECTIONS (aka "PIPETTE")
    do
      if [[ $ini == *"PIPETTE"* ]]; then
        unset ARHG # resets ARHG
        declare -A ARHG # declares an associative array
        while read -r A B
        do
          ARHG[$A]=$B
        done < <(awk -F'=' '/\[/ {x=0} x==1 && $0~/=/ && NF==2 {print $1, $2} $0==INI {x=1}' INI="$ini" "$CFG")

        REPO=${ARHG["pipette_repo"]}
        DIR=${ARHG["pipette_dir"]}
        C=${ARHG["coprocessor_nic"]}
        F=${ARHG["fake_interface"]}
        M=${ARHG["fake_mac"]}
        #sed command used to convert array notation to space delimited
        I=$(echo "${ARHG["fake_ips"]}" | sed 's/\[//g; s/\]//g; s/ //g; s/,/ /g')
        V=$(echo "${ARHG["coprocessor_vlans"]}" | sed 's/\[//g; s/\]//g; s/ //g; s/,/ /g')
        B=${ARHG["bridge"]}
        P=${ARHG["pipette_port"]}
        PL=${ARHG["pcap_location"]}
        PS=${ARHG["pcap_size"]}
      fi
    done
}

function run_pipette(){
    parse_config;

    echo "REPO: $REPO"
    echo "DIR: $DIR"
    if [[ -d "$DIR" ]]; then
        sudo rm -rf "$DIR"
    fi
    sudo git clone "$REPO" "$DIR"
    cd "$DIR" || return
    sudo git pull
    sudo ./runpipette.sh -c "$C" -f "$F" -m "$M" -i "$I" -v "$V" -b "$B" -p "$P" -r "$PL" "$PS" &
}

# entry point
if [ $# -gt 0 ]; then
    if [[ ( $# -eq 2 && $1 == "install" ) || ( $# -eq 2 && $1 == "-i" ) || ( $# -eq 2 && $1 == "start" ) || ( $# -eq 2 && $1 == "-s" ) || ( $# -eq 2 && $1 == "update" ) || ( $# -eq 2 && $1 == "-u" ) || ( $# -eq 1 ) || ( $1 == "shell" ) || ( $1 == "-e" ) ]]; then
        check_args "$@"
    else
        show_help
    fi
else # print help
    show_help
fi
